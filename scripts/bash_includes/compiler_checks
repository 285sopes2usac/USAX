#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-2-Clause

function compiler_checks {

   if [[ "$USE_SYSCC" != "" ]]; then

      echo
      echo "ERROR: The USE_SYSCC=1 setting is *NOT* supported anymore"
      echo
      echo "Now we use custom pre-compiled toolchains from:"
      echo
      echo "   https://github.com/vvaltchev/musl-cross-make"
      echo
      echo "Those toolchains are statically linked, include debug info"
      echo "for libmusl and are available for all the {host arch, "
      echo "target arch, gcc version} combinations supported."
      echo
      echo "Not supporting the system compiler anymore is a massive "
      echo "simplification for this project."
      echo

      exit 1
   fi

   #
   # GCC_TC_VER check: we need check that the current GCC_TC_VER is supported.
   # Over time, the MIN supported version moves forward.
   #

   major=$(get_version_comp "$GCC_TC_VER" 1)
   minor=$(get_version_comp "$GCC_TC_VER" 2)

   min_major=$(get_version_comp "$MIN_GCC_TC_VERSION" 1)
   min_minor=$(get_version_comp "$MIN_GCC_TC_VERSION" 2)

   if [[ $major -lt $min_major ||
         ( $major -eq $min_major && $minor -lt $min_minor ) ]]
   then
      echo -n "ERROR: GCC_TC_VER ($GCC_TC_VER) < "
      echo    "minimum supported ($MIN_GCC_TC_VERSION)"
      echo

      if [ -f $TC/.gcc_tc_ver_$ARCH ]; then
         echo -n "This looks like caused by a new change in the source "
         echo    "tree updating the minimum GCC version."
         echo
      fi

      echo "Steps to fix:"
      echo
      echo "   1. unset \$GCC_TC_VER"
      echo "   2. ./scripts/build_toolchain --clean"
      echo "   3. rm -rf ./build # or any other build directory"
      echo "   4. ./scripts/build_toolchain"
      echo
      exit 1
   fi
}


