#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-2-Clause

# This is the latest version of vim that works correctly. Version > v8.2.5056
# uses unsupported kernel features related to timers.
#
# See https://github.com/vim/vim/issues/10647
#
# TODO: check what exactly needs to be implemented in Tilck to support the
# latest version of vim and consider if it's worth the effort for Tilck in
# general. Hint: it looks like implementing sys_getitimer() and sys_setitimer()
# might be enough.

function download_vim {

   local tarname="vim-$VER_VIM.tgz"
   local url="https://github.com/vim/vim.git"
   local tag="$VER_VIM"

   download_git_repo_in_cache "$url" "$tag" $tarname $VER_VIM
   extract_cachefile_tar_gz $tarname $VER_VIM $VER_VIM
}

if [[ "$ARCH" == "i386" ]]; then
   all_funcs_list+=(build_vim)
fi
function build_vim {

   local compdir=$ARCH_DIR/vim/$VER_VIM
   local ncurses=$ARCH_DIR/ncurses/$VER_NCURSES/install
   local params=()

   if ! [ -d $compdir ]; then

      show_work_on_component_msg "VIM"
      reset_cc_vars

      if ! [ -d $ncurses ]; then
         echo "ERROR: ncurses is needed to build vim"
         echo "How to fix: run this script with -s build_ncurses first"
         exit 1
      fi

      mkdir -p $compdir/..
      pushd $compdir/..
      download_vim

      cd $compdir

      do_common_cross_compiler_setup
      set_cc_vars_to_tc
      export CFLAGS="-ggdb -Os"
      export LDFLAGS="-static -L$ncurses/lib -lncurses"
      export CPPFLAGS="-I$ncurses/include -I$ncurses/include/ncurses"


      params+=(--prefix=$compdir/install)
      params+=(--build=${HOST_ARCH}-linux-gnu)
      params+=(--host=${ARCH_GCC_TC}-linux-musl)
      params+=(--target=${ARCH_GCC_TC}-linux-musl)
      params+=(--with-features=normal)
      params+=(--with-tlib=ncurses)
      params+=(vim_cv_toupper_broken=no)
      params+=(vim_cv_terminfo=yes)
      params+=(vim_cv_tgetent=zero)
      params+=(vim_cv_getcwd_broken=no)
      params+=(vim_cv_stat_ignores_slash=no)
      params+=(vim_cv_memmove_handles_overlap=yes)

      set +e
      run_command2 "./configure ${params[*]}" configure.log
      run_command2 "make -j$BUILD_PAR" build.log
      run_command2 "make install" install.log
      set -e

      dump_cross_compiler_env "build.log"

      if ! [ -f install/bin/vim ]; then
         echo "ERROR: build failed !!!" >> build.log
         exit 1
      fi

      pushd install
         cp -r ../runtime .

         pushd runtime
            rm -rf doc lang tutor spell
         popd

         tar cfz vr.tgz runtime
         rm -rf runtime

         gzip -c --best ./bin/vim > vim.gz
         chmod 644 vim.gz
      popd

      if ! [ -f $compdir/install/vim.gz ]; then
         echo "ERROR: the install failed !!!" >> install.log
         exit 1
      fi

      export CFLAGS=""
      export LDFLAGS=""
      export CPPFLAGS=""

      popd

   else
      show_skip_component_msg "VIM"
   fi

   reset_cc_vars
}

function build_vim_installed_status {

   local arch_list=""

   pushd $ARCH_DIR/..

   for x in ${ALL_ARCH_LIST[@]}; do
      if [ -d $x/vim/$VER_VIM ]; then
         if [ -f $x/vim/$VER_VIM/install/vim.gz ]; then
            arch_list="${arch_list}$x "
         else
            echo "error"
            return
         fi
      fi
   done

   popd

   # Drop the trailing " "
   if [[ "${arch_list: -1}" == " " ]]; then
      arch_list="${arch_list:: -1}"
   fi

   if [ -n "$arch_list" ]; then
      echo "installed $arch_list"
   fi
}
