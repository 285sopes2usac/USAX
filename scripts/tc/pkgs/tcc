#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-2-Clause

# Old version, worked with up to GCC 9.3.0
# TCC_VER="15e9b7384e709120"

# Latest version, Nov 2024 (doesn't work completely on Tilck now)
TCC_VER="729918ef35dede267926b"

function download_tcc {

   local url="git://repo.or.cz/tinycc.git"
   local ver="$TCC_VER"
   local tarname="tcc-$ver.tgz"

   download_git_repo_in_cache "$url" $ver $tarname tcc
   extract_cachefile_tar_gz $tarname --
}

# XXX: disable TCC for now as it doesn't completely work with newer musl
# toolchains (>= GCC 10.3.0). With GCC >= 10.3, TinyCC on Tilck generates
# binaries that just crash, even on Linux.
#
# Fixing this might require quite some extra work, while TCC on Tilck it's
# not actually used by anyone or anything.
#
# The core of the problem is that we need to cross-build TinyCC for a cross
# target. In other words we need:
#
#     Build host: x86-64-linux
#     TinyCC will run on: i386-linux (Tilck)
#     TinyCC binaries target: i386-linux (Tilck)
#
# And TinyCC's build system does not support that. It worked until now with
# a series of hacks that are harder and harder to maintain. The code below
# clearly shows that supporting TinyCC is by far harder than any other package
# we have.

# if [[ $HOST_ARCH == "i386" ]] || [[ $HOST_ARCH == "x86_64" ]]; then
#    if [[ "$ARCH" == "i386" ]]; then
#       all_funcs_list+=(build_tcc)
#    fi
# fi

function build_tcc {

   if [[ $HOST_ARCH != "i386" ]] && [[ $HOST_ARCH != "x86_64" ]]; then
      echo "ERROR: HOST_ARCH=$HOST_ARCH not supported"
      return
   fi

   if [ ! -d $ARCH/tcc ]; then

      reset_cc_vars

      if [[ "$HOST_ARCH" == "$BUILD_ARCH" ]]; then
         install_32bit_libs
      fi

      download_gcc_tc_internal $ARCH musl
   fi


   pushd $ARCH

   if [ ! -d tcc ]; then

      show_work_on_component_msg "TCC"

      download_tcc
      cd tcc

      # Variables for making the compiler to work on Tilck
      # Note: these vars are used by --crtprefix and --libpaths
      # and do not affect the compiler in case just -c is used to
      # compile a single C file, without linking.

      local p="/"
      local lib="/lib/$ARCH_GCC_TC-tilck-musl"

      # To test it on the Linux build machine
      # local tc=$TC/host_${HOST_ARCH}/${GCC_NAME_PFX}_musl
      # local p="$tc/$ARCH/tcc/install"
      # local lib=$tc/$ARCH_GCC_TC-buildroot-linux-musl/sysroot/lib

      local ldflags="-Wl,--oformat=$ARCH_ELF_NAME -static"

      # Default case
      set_cc_vars_to_tc

      # Hack: unfortunately, the TCC build wants to build, with the
      # cross-compiler, the c2str tool, from the conftest.c file, instead of
      # using a system compiler. In other words, c2str is incompatible with the
      # cross build support (for the TinyCC itself, not its targets!). The only
      # solution appears to be at the moment to just patch the Makefile to
      # use it always just the system "gcc" to build that tool.

      sed -i -e 's/$S$(CC) -DC2STR/gcc -DC2STR/g' Makefile

      # Hack: make __udivmoddi4() non static, since on Tilck we fail to link
      # binaries due to this symbol not being found. However, while with that
      # the link succeeds, the binary crashes.
      local decl="UDWtype __udivmoddi4"
      sed -i -e "s/static $decl/$decl/g" lib/libtcc1.c

      local flags="--enable-cross --cross-prefix=$ARCH_GCC_TC-linux-"
      local flags="$flags --enable-static --cpu=$ARCH"
      local af="$flags --prefix=$p --extra-ldflags='$ldflags'"
      local af="$af --crtprefix=$lib --libpaths=$lib"

      if [ -f .our_tag ]; then
         local tag=`cat .our_tag`
         local githash="$tag"
         local def_githash="-DTCC_GITHASH=\\\\\\\"${githash}\\\\\\\""
         local make_vars="DEF_GITHASH=\"$def_githash\""
      fi

      run_command2 "./configure $af" configure.log

      set +e
      run_command2 "make $make_vars cross-$ARCH" build.log
      dump_cross_compiler_env "build.log"

      if ! [ -f $TC/$ARCH/tcc/${ARCH}-tcc ]; then
         echo "ERROR: build failed !!!" >> build.log
         exit 1
      fi

      set -e
      # Just to test on the local machine
      # run_command2 "make install" install.log

      # Note the configure --strip-binaries option does not work
      $ARCH_GCC_TC-linux-strip --strip-all $ARCH-tcc

   else

      show_skip_component_msg "TCC"
   fi

   popd
}

function build_tcc_installed_status {

   local arch_list=""

   for x in ${ALL_ARCH_LIST[@]}; do
      if [ -d $TC/$x/tcc ]; then
         if [ -f $TC/$x/tcc/${x}-tcc ]; then
            arch_list="${arch_list}$x "
         else
            echo "error"
            return
         fi
      fi
   done

   # Drop the trailing " "
   if [[ "${arch_list: -1}" == " " ]]; then
      arch_list="${arch_list:: -1}"
   fi

   if [ -n "$arch_list" ]; then
      echo "installed $arch_list"
   fi
}
