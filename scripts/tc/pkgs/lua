#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-2-Clause

LUA_VER="5.4.1"

function download_lua {
   local version="$LUA_VER"
   local filename="lua"
   local tarname="lua-$version.tar.gz"
   local url="https://www.lua.org/ftp/"

   download_file_in_cache "$url" "$tarname"
   extract_cachefile_tar_gz "$tarname" "lua-$version" "lua"
}

if [[ "$ARCH" == "i386" ]]; then
   all_funcs_list+=(build_lua)
fi
function build_lua {

   pushd $ARCH_DIR
   reset_cc_vars
   show_work_on_component_msg "LUA"

   if ! [ -d "lua" ]; then

      download_lua
      cd lua

      do_common_cross_compiler_setup
      set_cc_vars_to_tc

      # Patch Lua's Makefile to remove "-Wl,-E"
      sed -i 's/-Wl,-E//g' src/Makefile

      # Build the lua and luac static binaries
      echo "Building lua..."
      local flags=""
      flags="CC=\"$CC\" MYCFLAGS=\"-std=gnu99\""
      flags="$flags AR=\"$AR rcu\" RANLIB=\"$RANLIB\""
      flags="$flags MYLDFLAGS=\"-static\""
      run_command2 "make $flags" build.log

      echo "Lua built successfully"

   else
      show_skip_component_msg "LUA"
   fi

   reset_cc_vars
   popd
}

function build_lua_installed_status {

   local arch_list=""

   pushd $ARCH_DIR/..

   for x in ${ALL_ARCH_LIST[@]}; do
      if [ -d $x/lua ]; then
         if [ -f $x/lua/src/lua ]; then
            arch_list="${arch_list}$x "
         else
            echo "error"
            return
         fi
      fi
   done

   popd

   # Drop the trailing " "
   if [[ "${arch_list: -1}" == " " ]]; then
      arch_list="${arch_list:: -1}"
   fi

   if [ -n "$arch_list" ]; then
      echo "installed $arch_list"
   fi
}
