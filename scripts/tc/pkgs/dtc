#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-2-Clause

DTC_VER="1.7.0"

function internal_build_dtc {

   echo "Building libfdt from the DTC project... "
   reset_cc_vars

   do_common_cross_compiler_setup
   set_cc_vars_to_tc
   export STATIC_BUILD=1
   export EXTRA_CFLAGS="-fno-stack-protector"

   set +e
   run_command2 "make clean" build.log
   run_command2 "make libfdt V=1 -j$BUILD_PAR" build.log
   dump_cross_compiler_env "build.log"

   if ! [ -f $ARCH_DIR/dtc/libfdt/libfdt.a ]; then
      echo "ERROR: build failed: libfdt.a not found !!!" >> build.log
      exit 1
   fi
   set -e

   export STATIC_BUILD=""
   export EXTRA_CFLAGS=""
}

all_funcs_list+=(build_dtc)
function build_dtc {

   pushd $ARCH_DIR

   if ! [ -d dtc ]; then

      show_work_on_component_msg "DTC"

      local ver="$DTC_VER"
      local tarname=dtc-$ver.tar.gz
      local url1="https://mirrors.edge.kernel.org/"
      local url2="pub/software/utils/dtc/"

      download_file_in_cache $url1$url2 "$tarname"
      extract_cachefile_tar_gz $tarname dtc-$ver dtc

      pushd dtc
      internal_build_dtc
      popd

   elif [ "$REBUILD" == "1" ]; then

      pushd dtc
      internal_build_dtc
      popd

   else
      show_skip_component_msg "DTC"
   fi

   popd
}

function build_dtc_installed_status {

   local arch_list=""

   pushd $ARCH_DIR/..

   for x in ${ALL_ARCH_LIST[@]}; do
      if [ -d $x/dtc ]; then
         if [ -f $x/dtc/libfdt/libfdt.a ]; then
            arch_list="${arch_list}$x "
         else
            echo "error"
            return
         fi
      fi
   done

   popd

   # Drop the trailing " "
   if [[ "${arch_list: -1}" == " " ]]; then
      arch_list="${arch_list:: -1}"
   fi

   if [ -n "$arch_list" ]; then
      echo "installed $arch_list"
   fi
}
