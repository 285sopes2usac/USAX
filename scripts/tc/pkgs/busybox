#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-2-Clause

BUSYBOX_CONFIG=$MAIN_DIR/other/busybox.config

function internal_build_busybox {

   echo "Building busybox... "
   reset_cc_vars

   cp $BUSYBOX_CONFIG .config

   do_common_cross_compiler_setup
   set_cc_vars_to_tc
   export CROSS_COMPILE="${ARCH_GCC_TC}-linux-"

   set +e
   run_command2 "make V=1 -j$BUILD_PAR" build.log
   dump_cross_compiler_env "build.log"

   if ! [ -f $ARCH_DIR/busybox/$VER_BUSYBOX/busybox ]; then
      echo "ERROR: build failed !!!" >> build.log
      exit 1
   fi
   set -e
   export CROSS_COMPILE=""
   export CC_POST_FLAGS=""

   busybox_fix_config_file

   # Save a copy of the last built .config file
   cp .config .last_build_config
}

all_funcs_list+=(build_busybox)
function build_busybox {

   local compdir=$ARCH_DIR/busybox/$VER_BUSYBOX
   local url="https://busybox.net/downloads"
   local ver="$VER_BUSYBOX"
   local tarname=busybox-$ver.tar.bz2


   if [ -d $compdir ]; then

      pushd $compdir
      s1=`sha1sum .config | cut -d " " -f 1`
      s2=`sha1sum .last_build_config | cut -d " " -f 1`

      if [[ "$s1" != "$s2" ]]; then

         echo "Busybox: .config != .last_build_config"
         echo -n "Do you want to rebuild with the new config? [Y/n]: "
         read answer

         if [[ "$answer" == "" || "$answer" == "y" ]]; then

            echo -n "Do you want an incremental build? [Y/n]: "
            read answer
            if [[ "$answer" == "" || "$answer" == "y" ]]; then
               internal_build_busybox
            else
               rm -rf $compdir
            fi
         fi
      fi

      popd
   fi

   if ! [ -d $compdir ]; then

      show_work_on_component_msg "BUSYBOX"
      mkdir -p $compdir/..
      pushd $compdir/..

      download_file_in_cache "$url" "$tarname"
      extract_cachefile_tar_bz $tarname busybox-$ver $ver

      pushd $compdir
      internal_build_busybox
      popd
      popd

   elif [[ "$REBUILD" == "1" ]]; then

      pushd $compdir
      internal_build_busybox
      popd

   else
      show_skip_component_msg "BUSYBOX"
   fi
}

function build_busybox_installed_status {

   local arch_list=""

   pushd $ARCH_DIR/..

   for x in ${ALL_ARCH_LIST[@]}; do
      if [ -d $x/busybox/$VER_BUSYBOX ]; then
         if [ -f $x/busybox/$VER_BUSYBOX/busybox ]; then
            arch_list="${arch_list}$x "
         else
            echo "error"
            return
         fi
      fi
   done

   popd

   # Drop the trailing " "
   if [[ "${arch_list: -1}" == " " ]]; then
      arch_list="${arch_list:: -1}"
   fi

   if [ -n "$arch_list" ]; then
      echo "installed $arch_list"
   fi
}

function busybox_fix_config_file {

   # Remove the date-time row (in order to allow config diff to work)
   sed -i -e '4d' .config

   # Remove all empty lines
   sed -i '/CONFIG_/!d' .config

   # Sort all the lines
   LC_ALL=C sort -sr .config > .config_sorted
   mv .config_sorted .config
}

all_funcs_list+=(config_busybox)
function config_busybox {

   local compdir=$ARCH_DIR/busybox/$VER_BUSYBOX

   if ! [ -d $compdir ]; then
      echo "ERROR: busybox not found in toolchain"
      exit 1
   fi

   pushd $compdir

   make menuconfig

   echo -n "Do you want to update busybox.config with the new config? [Y/n]: "
   read answer

   busybox_fix_config_file

   if [[ "$answer" == "" || "$answer" == "y" ]]; then
      cp .config $BUSYBOX_CONFIG
      echo "Source file $BUSYBOX_CONFIG UPDATED"
   fi

   popd

   build_busybox
}
