#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-2-Clause

function bootloader_fix_config_file {

   # Remove the date-time row (in order to allow config diff to work)
   sed -i -e '4d' .config

   # Remove all empty lines
   sed -i '/CONFIG_/!d' .config

   # Sort all the lines
   LC_ALL=C sort -sr .config > .config_sorted
   mv .config_sorted .config
}

function build_uboot_internal {

   echo "Building u-boot... "
   reset_cc_vars

   cp $BOARD_BSP/u-boot.config .config

   do_common_cross_compiler_setup
   set_cc_vars_to_tc

   set +e
   run_command2 "make V=1 -j$BUILD_PAR" build.log
   dump_cross_compiler_env "build.log"

   if ! [ -f $ARCH_DIR/uboot/$VER_UBOOT/u-boot ]; then
      echo "ERROR: build failed !!!" >> build.log
      exit 1
   fi
   set -e

   bootloader_fix_config_file

   # Save a copy of the last built .config file
   cp .config .last_build_config
}

#
# HACK: patch the include/configs/qemu-riscv.h to let u-boot to load
# the boot.scr to an address in the 128M range. With he original address to
# start the qemu with 128 MB memory will be failed.
#
function bootloader_patch {

   old="scriptaddr=0x8c100000"
   new="scriptaddr=0x80200000"

   file="include/configs/qemu-riscv.h"
   if ! [ -f $file ]; then
      echo "ERROR: file $file not found!"
      exit 1
   fi
   run_command "sed -i 's/${old}/${new}/' $file"
}

if [[ "$BOARD" == "qemu-virt" ]]; then
   all_funcs_list+=(build_uboot)
   default_funcs+=(build_uboot)
fi

function build_uboot {

   local compdir=$ARCH_DIR/uboot/$VER_UBOOT
   local ver="$VER_UBOOT"
   local tarname=u-boot-$ver.tar.bz2

   if [ -d $compdir ]; then

      pushd $compdir
      s1=`sha1sum ./.config | cut -d " " -f 1`
      s2=`sha1sum ./.last_build_config | cut -d " " -f 1`

      if [ "$s1" != "$s2" ]; then

         echo "U-boot: .config != .last_build_config"
         echo -n "Do you want to rebuild with the new config? [Y/n]: "
         read answer

         if [[ "$answer" == "" || "$answer" == "y" ]]; then

            echo -n "Do you want an incremental build? [Y/n]: "
            read answer
            if [[ "$answer" == "" || "$answer" == "y" ]]; then
               build_uboot_internal
            else
               rm -rf $compdir
            fi
         fi
      fi

      popd
   fi

   if ! [ -d $compdir ]; then

      show_work_on_component_msg "U-BOOT"
      mkdir -p $compdir/..
      pushd $compdir/..

      download_file_in_cache "https://ftp.denx.de/pub/u-boot" "$tarname"
      extract_cachefile_tar_bz $tarname u-boot-$ver $ver

      cd $compdir
      bootloader_patch
      build_uboot_internal
      popd

   elif [ "$REBUILD" == "1" ]; then

      pushd $compdir
      build_uboot_internal
      popd

   else
      show_skip_component_msg "U-BOOT"
   fi
}

function build_uboot_installed_status {

   local arch_list=""

   pushd $ARCH_DIR/..

   for x in ${ALL_ARCH_LIST[@]}; do
      if [ -d $x/uboot/$VER_UBOOT ]; then
         if [ -f $x/uboot/$VER_UBOOT/u-boot.bin ]; then
            arch_list="${arch_list}$x "
         else
            echo "error"
            return
         fi
      fi
   done

   popd

   # Drop the trailing " "
   if [[ "${arch_list: -1}" == " " ]]; then
      arch_list="${arch_list:: -1}"
   fi

   if [ -n "$arch_list" ]; then
      echo "installed $arch_list"
   fi
}

all_funcs_list+=(config_uboot)
function config_uboot {

   local compdir=$ARCH_DIR/uboot/$VER_UBOOT

   if ! [ -d $compdir ]; then
      echo "ERROR: uboot not found in toolchain"
      exit 1
   fi

   pushd $compdir

   make menuconfig

   echo -n "Do you want to update u-boot.config with the new config? [Y/n]: "
   read answer

   busybox_fix_config_file

   if [[ "$answer" == "" || "$answer" == "y" ]]; then
      cp .config $BOARD_BSP/u-boot.config
      echo "Source file $BOARD_BSP/u-boot.config UPDATED"
   fi

   popd

   build_uboot
}
